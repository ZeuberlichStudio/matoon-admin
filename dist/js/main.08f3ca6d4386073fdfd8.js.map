{"version":3,"sources":["webpack://admin/./src/providers/dataProvider.js","webpack://admin/./src/providers/extendedProvider.js","webpack://admin/./src/providers/authProvider.js","webpack://admin/./src/components/ListToolbar.js","webpack://admin/./src/components/lists/CatList.js","webpack://admin/./src/components/lists/ProductList.js","webpack://admin/./src/components/lists/PostList.js","webpack://admin/./src/components/lists/NameOnlyList.js","webpack://admin/./src/components/lists/ColorList.js","webpack://admin/./src/components/editors/CatEditor.js","webpack://admin/./src/components/fields/ImageField.js","webpack://admin/./src/components/editors/ProductEditor.js","webpack://admin/./src/components/editors/PostEditor.js","webpack://admin/./src/components/editors/NameOnlyEditor.js","webpack://admin/./src/components/editors/ColorEditor.js","webpack://admin/./src/components/create/CreateProduct.js","webpack://admin/./src/app.js","webpack://admin/./src/index.js"],"names":["API_URL","process","httpClient","url","options","headers","Headers","Accept","token","localStorage","getItem","set","fetchUtils","getList","resource","params","pagination","page","perPage","sort","field","order","query","then","res","data","json","map","id","_id","total","parseInt","get","getMany","header","getOne","Object","assign","update","method","body","JSON","stringify","create","deleteMany","ids","dataProvider","images","variants","allImages","concat","apply","variant","files","filterFiles","length","uploadImages","result","replaceFilesWithRecordIds","image","rawFile","File","filter","Boolean","key","formData","FormData","forEach","file","append","fetch","console","error","records","find","record","name","includes","login","username","password","response","status","Error","setItem","logout","removeItem","Promise","resolve","checkAuth","reject","checkError","getPermissions","ListToolbar","props","basePath","useListContext","TopToolbar","CreateButton","List","title","actions","Datagrid","rowClick","ReferenceField","source","reference","label","TextField","NumberField","BooleanField","ChipField","style","currency","DateField","postTypes","banner","feed","FunctionField","render","type","EditorTitle","CatEdit","Edit","SimpleForm","TextInput","validate","required","ReferenceInput","parent","$exists","SelectInput","optionText","CatCreate","Create","ImageField","path","undefined","forChoices","value","EditTitle","sku","validateProduct","prices","errors","validatePriceQty","input","priceIndex","match","minQty","ProductEdit","TabbedForm","FormTab","ImageInput","labelMultiple","multiple","optionValue","choices","ReferenceArrayInput","SelectArrayInput","BooleanInput","fullWidth","ArrayInput","SimpleFormIterator","AutocompleteInput","NumberInput","typeChoices","sizeChoices","staticPageChoices","PostEdit","labelSingle","FormDataConsumer","rest","ReferenceArraySelect","additionalChoices","PostCreate","NameOnlyEdit","NameOnlyCreate","ColorCreate","ColorEdit","defaultValues","color","brand","amount","CreateProduct","initialValues","Admin","authProvider","Resource","list","ProductList","edit","EditProduct","icon","ProductIcon","CatList","CategoryIcon","BrandIcon","MaterialIcon","PostList","PostIcon","ColorList","BrushIcon","document","getElementById"],"mappings":"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","file":"js/main.08f3ca6d4386073fdfd8.js","sourcesContent":["import { fetchUtils } from 'react-admin';\r\n\r\nconst {API_URL} = process.env;\r\nconst httpClient = (url, options = {}) => {\r\n    if (!options.headers) {\r\n        options.headers = new Headers({ Accept: 'application/json' });\r\n    }\r\n    const token = localStorage.getItem('token');\r\n    options.headers.set('Authorization', `Bearer ${token}`);\r\n    return fetchUtils.fetchJson(url, options);\r\n}\r\n\r\nexport default {\r\n    getList(resource, params) {\r\n        const { page, perPage } = params.pagination;\r\n        const { field, order } = params.sort;\r\n        const query = `limit=${perPage}&skip=${(page - 1) * perPage}&sort=${field},${order === 'DESC' ? '-1' : '1'}`;\r\n        const url = `${API_URL}/${resource}?${query}`;\r\n\r\n\r\n        return httpClient(url)\r\n        .then(res => ({\r\n           data: res.json.map(resource => ({...resource, id: resource._id})),\r\n           total: parseInt(res.headers.get('X-Total-Count'))\r\n        }));\r\n    },\r\n\r\n    getMany(resource, params) {\r\n        const query = ``;\r\n        const url = `${API_URL}/${resource}?${query}`;\r\n\r\n        return httpClient(url).then(({header, json}) => ({\r\n           data: json.map(resource => ({...resource, id: resource._id}))\r\n        }));\r\n    },\r\n\r\n    getOne(resource, params) {\r\n        const url = `${API_URL}/${resource}/${params.id}`;\r\n\r\n        return httpClient(url).then(({json}) => ({\r\n            data: Object.assign(json, { id: json._id })\r\n        }));\r\n    },\r\n\r\n    update(resource, params) {\r\n        return httpClient(`${API_URL}/${resource}/${params.id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params.data)\r\n        }).then(({json}) => ({\r\n            data: Object.assign(json, { id: json._id })\r\n        }));\r\n    },\r\n\r\n    create(resource, params) {\r\n        return httpClient(`${API_URL}/${resource}`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(params.data)\r\n        }).then(({json}) => ({\r\n            data: Object.assign(json, { id: json._id })\r\n        }));\r\n    },\r\n\r\n    delete(resource, params) {\r\n        return httpClient(`${API_URL}/${resource}/${params.id}`, {\r\n            method: 'DELETE'\r\n        }).then(({json}) => ({data: json}))\r\n    },\r\n\r\n    deleteMany(resource, params) {\r\n        return httpClient(`${API_URL}/${resource}`, {\r\n            method: 'DELETE',\r\n            body: JSON.stringify(params.ids)\r\n        }).then(({json}) => ({data: json}))\r\n    }\r\n}","import dataProvider from './dataProvider';\r\n\r\nconst {API_URL} = process.env;\r\n\r\nexport default {\r\n    ...dataProvider,\r\n    \r\n    async update(resource, params) {\r\n        if ( resource === 'products' ) {\r\n            const {images, variants} = params.data;\r\n            const allImages = [].concat.apply(\r\n                images || [], \r\n                variants?.map(variant => variant.images || []) || []\r\n            );\r\n            const files = filterFiles(allImages);\r\n    \r\n            if ( files.length == 0 ) return dataProvider.update(resource, params);\r\n            else return uploadImages(files)\r\n                .then(result => dataProvider.update(`products`, {\r\n                    ...params,\r\n                    data: {\r\n                        ...params.data, \r\n                        images: replaceFilesWithRecordIds(images, result),\r\n                        variants: variants.map(variant => ({\r\n                            ...variant, \r\n                            images: replaceFilesWithRecordIds(variant.images, result) \r\n                        }))\r\n                    }\r\n                }));\r\n        }\r\n        else if ( resource === 'posts' ) {\r\n            const {image} = params.data;\r\n            const files = filterFiles(image ? [image]: []);\r\n\r\n            if ( files.length == 0 ) return dataProvider.update(resource, params);\r\n            else return uploadImages(files)\r\n                .then(result => dataProvider.update('posts', {\r\n                    ...params,\r\n                    data: {\r\n                        ...params.data,\r\n                        image: result[0]._id\r\n                    }\r\n                }));\r\n        }\r\n        else return dataProvider.update(resource, params);\r\n    },\r\n\r\n    async create(resource, params) {\r\n        if ( resource === 'products' ) {\r\n            const {images, variants} = params.data;\r\n            const allImages = [].concat.apply(\r\n                images || [], \r\n                variants?.map(variant => variant.images || []) || []\r\n            );\r\n            const files = filterFiles(allImages);\r\n\r\n            if ( files.length == 0 ) return dataProvider.create(resource, params);\r\n            else return uploadImages(files)\r\n                .then(result => dataProvider.create(`products`, {\r\n                    ...params,\r\n                    data: {\r\n                        ...params.data, \r\n                        images: images ? replaceFilesWithRecordIds(images, result) : [],\r\n                        variants: variants.map(({images, ...rest}) => ({\r\n                            ...rest, \r\n                            images: images ? replaceFilesWithRecordIds(images, result) : []\r\n                        }))\r\n                    }\r\n                }));\r\n        }\r\n        else if ( resource === 'posts' ) {\r\n            const {image} = params.data;\r\n            const files = filterFiles([image]);\r\n\r\n            if ( files.length == 0 ) return dataProvider.create(resource, params);\r\n            else return uploadImages(files)\r\n                .then(result => dataProvider.create('posts', {\r\n                    ...params,\r\n                    data: {\r\n                        ...params.data,\r\n                        image: result[0]._id\r\n                    }\r\n                }));\r\n        }\r\n        else return dataProvider.create(resource, params);\r\n    }\r\n}\r\n\r\nfunction filterFiles(images) {\r\n    return images.map(({rawFile}) => rawFile instanceof File ? rawFile : false).filter(Boolean);\r\n}\r\n\r\nfunction uploadImages(files, key = 'images') {\r\n    const formData = new FormData();\r\n    \r\n    files.forEach(file => {\r\n        formData.append(key, file);\r\n    });\r\n\r\n    return fetch(`${API_URL}/images`, {\r\n        method: 'POST',\r\n        body: formData\r\n    })\r\n        .then(data => data.json())\r\n        .catch(console.error);\r\n}\r\n\r\nfunction replaceFilesWithRecordIds(images, records) {\r\n    return images.map(image => {\r\n        if ( image._id ) return image._id;\r\n        else return records.find(record => record.name.includes(image.rawFile.name));\r\n    });\r\n}","const {API_URL} = process.env;\r\n\r\nexport default {\r\n    login: ({username, password}) => {\r\n        return fetch(`${API_URL}/users/verify`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ username, password }),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        })\r\n            .then((response) => {\r\n                if (response.status < 200 || response.status >= 300) {\r\n                    throw new Error(response);\r\n                }\r\n                \r\n                return response.json();\r\n            })\r\n            .then(token => localStorage.setItem('token', token));\r\n    },\r\n    logout: () => {\r\n        localStorage.removeItem('token');\r\n        return Promise.resolve();\r\n    },\r\n\r\n    checkAuth: () => {\r\n        return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\r\n    },\r\n\r\n    checkError: (error) => {\r\n        const status = error.status;\r\n        if (status === 401 || status === 403) {\r\n            localStorage.removeItem('token');\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    },\r\n\r\n    getPermissions: () => {\r\n        return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\r\n    },\r\n}","import React from 'react';\r\nimport {\r\n    TopToolbar,\r\n    CreateButton,\r\n    useListContext\r\n} from 'react-admin';\r\n\r\nexport default function ListToolbar(props) {\r\n\r\n    const { basePath } = useListContext(props);\r\n\r\n    return (\r\n        <TopToolbar {...props}>\r\n            <CreateButton basePath={basePath}/>\r\n        </TopToolbar>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { \r\n    List, \r\n    Datagrid, \r\n    ReferenceField, \r\n    TextField, \r\n    NumberField\r\n} from 'react-admin';\r\nimport ListToolbar from '~/components/ListToolbar';\r\n\r\nconst CatList = props => (\r\n    <List {...props} title=\"Категории\" actions={<ListToolbar/>} sort={{ field: 'parent', order: 'ASC' }}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <ReferenceField source=\"parent\" reference=\"cats\" label=\"Родительская категория\">\r\n                <TextField source=\"name\" />\r\n            </ReferenceField>\r\n            <TextField source=\"name\" label=\"Название\"/>\r\n            <NumberField source=\"productCount\" label=\"Кол-во товаров\"/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport default CatList;","import React from 'react';\r\nimport { \r\n    List, Datagrid, ReferenceField, TextField, NumberField, DateField, ArrayField,\r\n    SingleFieldList, ChipField, BooleanField\r\n} from 'react-admin';\r\nimport ListToolbar from '~/components/ListToolbar';\r\n\r\nconst ProductList = props => (\r\n    <List {...props} title=\"Товары\" actions={<ListToolbar/>} sort={{ field: 'meta.createdAt', order: 'DESC' }}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <BooleanField source=\"isPublished\" label=\"Опубликован\" />\r\n            <TextField source=\"sku\" label=\"Артикул\" />\r\n            <TextField source=\"name\" label=\"Название\" />\r\n\r\n            <ReferenceField source=\"cat._id\" reference=\"cats\" label=\"Категория\">\r\n                <ChipField source=\"name\" />\r\n            </ReferenceField>\r\n\r\n            {/* TODO написать поле для максимальной\\минимальной цены */}\r\n            <NumberField source=\"minPrice\" options={{ style: 'currency', currency: 'RUB' }} label=\"Мин. цена\" />\r\n            <NumberField source=\"maxPrice\" options={{ style: 'currency', currency: 'RUB' }} label=\"Макс. цена\" />\r\n\r\n            <DateField source=\"meta.createdAt\" label=\"Создан\" />\r\n            <DateField source=\"meta.updatedAt\" label=\"Обновлён\" />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport default ProductList;","import React from 'react';\r\nimport { \r\n    List, Datagrid, TextField, DateField, ChipField, FunctionField, ReferenceArrayField\r\n} from 'react-admin';\r\nimport ListToolbar from '~/components/ListToolbar';\r\n\r\nconst postTypes = {\r\n    banner: 'Баннер',\r\n    feed: 'Сетка новостей'\r\n}\r\n\r\nconst PostList = props => (\r\n    <List {...props} title=\"Посты\" actions={<ListToolbar/>} sort={{ field: 'meta.createdAt', order: 'DESC' }}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"name\" label=\"Название\" />\r\n            <FunctionField label=\"Тип отображения\" source=\"type\" render={record => <i>{postTypes[record.type]}</i>}/>\r\n            \r\n            <DateField source=\"meta.createdAt\" label=\"Создан\" />\r\n            <DateField source=\"meta.updatedAt\" label=\"Обновлён\" />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport default PostList;","import React from 'react';\r\nimport { List, Datagrid, ReferenceField, TextField, NumberField } from 'react-admin';\r\nimport ListToolbar from '~/components/ListToolbar';\r\n\r\nconst NameOnlyList = props => (\r\n    <List {...props} actions={<ListToolbar/>} sort={{ field: 'name', order: 'ASC' }}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"name\" label=\"Название\"/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport default NameOnlyList;","import React from 'react';\r\nimport { List, Datagrid, ReferenceField, TextField, NumberField } from 'react-admin';\r\nimport { ColorField } from 'react-admin-color-input';\r\nimport ListToolbar from '~/components/ListToolbar';\r\n\r\nconst ColorList = props => (\r\n    <List {...props} title=\"Цвета\" actions={<ListToolbar/>} sort={{ field: 'name', order: 'ASC' }}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"name\" label=\"Название\"/>\r\n            <ColorField source=\"code\" label=\"Цвет\"/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport default ColorList;","import React from 'react';\r\nimport {\r\n    Create,\r\n    Edit,\r\n    SimpleForm,\r\n    ReferenceInput,\r\n    SelectInput,\r\n    TextInput,\r\n    NumberInput,\r\n    required\r\n} from 'react-admin';\r\n\r\nconst EditorTitle = ({record}) => <span>Редактировать {record.name}</span>;\r\n\r\nexport const CatEdit = props => (\r\n    <Edit {...props} title={<EditorTitle/>}>\r\n        <SimpleForm>\r\n            <TextInput source=\"name\" label=\"Название\" validate={required('обязательное поле')}/>\r\n\r\n            <ReferenceInput source=\"parent\" reference=\"cats\" label=\"Родительская категория\" filter={{ parent: { $exists: false } }}>\r\n                <SelectInput optionText=\"name\" />\r\n            </ReferenceInput>\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const CatCreate = props => (\r\n    <Create {...props} title=\"Создать категорию\">\r\n        <SimpleForm>\r\n            <TextInput source=\"name\" label=\"Название\" validate={required('обязательное поле')}/>\r\n\r\n            <ReferenceInput source=\"parent\" reference=\"cats\" label=\"Родительская категория\"  filter={{ parent: { $exists: false } }}>\r\n                <SelectInput optionText=\"name\" />\r\n            </ReferenceInput>\r\n        </SimpleForm>\r\n    </Create>\r\n);","import React from 'react';\r\nimport {ImageField} from 'react-admin';\r\n\r\nconst {API_URL} = process.env;\r\n\r\nexport default ({ record = {} }) => (\r\n    <ImageField \r\n        record={{...record, path: `${API_URL}/${record?.path}`}} \r\n        source={record?.undefined ? 'undefined' : 'path'}\r\n    />\r\n);","import React from 'react';\r\nimport {\r\n    Edit,\r\n    TabbedForm,\r\n    FormTab,\r\n    ReferenceInput,\r\n    ReferenceArrayInput,\r\n    SelectInput,\r\n    TextInput,\r\n    NumberInput,\r\n    ArrayInput,\r\n    SimpleFormIterator,\r\n    AutocompleteInput,\r\n    ImageInput,\r\n    SelectArrayInput,\r\n    BooleanInput,\r\n    required\r\n} from 'react-admin';\r\nimport ImageField from '~/components/fields/ImageField';\r\n\r\nconst forChoices = [\r\n    {\r\n        name: \"Унисекс\",\r\n        value: \"unisex\"\r\n    },\r\n    {\r\n        name: \"Для мужчин\",\r\n        value: \"male\"\r\n    },\r\n    {\r\n        name: \"Для женщин\",\r\n        value: \"female\"\r\n    }\r\n]\r\n\r\nconst EditTitle = ({record}) => <span>Редактировать {record.sku}</span>;\r\n\r\nfunction validateProduct ({\r\n    name,\r\n    sku,\r\n    variants,\r\n    prices\r\n}) {\r\n    const errors = {};\r\n\r\n    if ( !name ) errors.name = 'Обязательное поле';\r\n    if ( !sku ) errors.sku = 'Обязательное поле';\r\n    if ( variants?.length < 1 ) errors.variants = 'Укажите минимум одну вариацию товара';\r\n    if ( prices?.length < 1 ) errors.prices = 'Укажите минимум одну оптовую цену';\r\n\r\n    return errors;\r\n}\r\n\r\nfunction validatePriceQty (value, {prices}, input) {\r\n    const priceIndex = input.name.match(/\\d/)[0];\r\n    if ( priceIndex == 0 && value != 1 ) return 'Мин. кол-во заказанного товара для первой цены должно быть 1';\r\n    if ( value < prices[priceIndex - 1]?.minQty ) return 'Мин. кол-во заказанного товара должно быть больше, чем для предыдущей цены';\r\n    else return undefined;\r\n}\r\n\r\nexport default function ProductEdit(props) {\r\n    return (\r\n        <Edit {...props} title={<EditTitle/>}>\r\n            <TabbedForm validate={validateProduct}>\r\n                <FormTab label=\"Основное\">\r\n                    <ImageInput \r\n                        source=\"images\" \r\n                        label=\"Общие изображения товара\" \r\n                        labelMultiple=\"Выберите до 3-х изображений\" \r\n                        multiple\r\n                    >\r\n                        <ImageField/>\r\n                    </ImageInput>\r\n\r\n                    <TextInput source=\"name\" label=\"Название\"/>\r\n                    <TextInput source=\"sku\" label=\"Артикул\"/>\r\n\r\n                    <ReferenceInput source=\"cat\" reference=\"cats\" label=\"Категория\">\r\n                        <SelectInput optionText=\"name\" optionValue=\"_id\"/>\r\n                    </ReferenceInput>\r\n\r\n                    <SelectInput \r\n                        source=\"for\" \r\n                        choices={forChoices}\r\n                        optionText=\"name\"\r\n                        optionValue=\"value\"\r\n                        label=\"Для\"\r\n                    />\r\n\r\n                    <ReferenceArrayInput  source=\"materials\" reference=\"materials\" label=\"Материалы\">\r\n                        <SelectArrayInput optionText=\"name\" optionValue=\"_id\"/>\r\n                    </ReferenceArrayInput >\r\n\r\n                    <BooleanInput source='isPublished'/>\r\n                </FormTab>\r\n\r\n                <FormTab label=\"Описание\">\r\n                    <TextInput fullWidth={true} source=\"shortDesc\" label=\"Краткое описание\"/>\r\n                    <TextInput fullWidth={true} source=\"desc\" label=\"Описание\"/>\r\n                </FormTab>\r\n\r\n                <FormTab label=\"Вариации/наличие\">\r\n                    <ArrayInput source=\"variants\" label=\"\">\r\n                        <SimpleFormIterator>\r\n                            <ImageInput source=\"images\" label=\"Изображения вариации\" labelMultiple=\"Выберите до 2-х изображений\" multiple>\r\n                                <ImageField/>\r\n                            </ImageInput>\r\n\r\n                            <ReferenceInput source=\"attributes.color\" reference=\"colors\" label=\"Цвет\">  \r\n                                <AutocompleteInput optionText=\"name\" optionValue=\"id\" validate={required('Обязательное поле')}/>\r\n                            </ReferenceInput>\r\n\r\n                            <ReferenceInput source=\"attributes.brand\" reference=\"brands\" label=\"Бренд\">  \r\n                                <AutocompleteInput optionText=\"name\" optionValue=\"id\" validate={required('Обязательное поле')}/>\r\n                            </ReferenceInput>\r\n\r\n                            <NumberInput source=\"stock\" label=\"Наличие\" validate={required('Обязательное поле')}/>\r\n                        </SimpleFormIterator>\r\n                    </ArrayInput>\r\n                </FormTab>\r\n\r\n                {/* TODO добавить возможность добавления товара с одним атрибутом */}\r\n                <FormTab label=\"Спецификации\">\r\n                    <ArrayInput source=\"specs\" label=\"\">\r\n                        <SimpleFormIterator>\r\n                            <TextInput source=\"[0]\" label=\"Название\"/>\r\n                            <TextInput source=\"[1]\" label=\"Значение\"/>\r\n                        </SimpleFormIterator>\r\n                    </ArrayInput>\r\n                </FormTab>\r\n\r\n                {/* TODO проверить валидацию минимального кол-ва */}\r\n                <FormTab label=\"Цены\">\r\n                    <ArrayInput source=\"prices\" label=\"\">\r\n                        <SimpleFormIterator>\r\n                            <TextInput source=\"minQty\" label=\"Мин. необходимое кол-во\" validate={validatePriceQty}/>\r\n                            <TextInput source=\"amount\" label=\"Цена за штуку\" validate={required('Обязательное поле')}/>\r\n                        </SimpleFormIterator>\r\n                    </ArrayInput>\r\n                </FormTab>\r\n\r\n                {/* TODO перевести все выходные занчения во float */}\r\n                <FormTab label=\"Вес/габариты\">\r\n                    <NumberInput \r\n                        source=\"shippingDetails.dimensions.w\" \r\n                        label=\"Ширина (мм)\"\r\n                    />\r\n                    <NumberInput \r\n                        source=\"shippingDetails.dimensions.l\"\r\n                        label=\"Длина (мм)\"\r\n                    />\r\n                    <NumberInput \r\n                        source=\"shippingDetails.dimensions.h\"\r\n                        label=\"Высота (мм)\"\r\n                    />\r\n                    <NumberInput \r\n                        source=\"shippingDetails.weight\"\r\n                        label=\"Вес (г)\"\r\n\r\n                    />\r\n                </FormTab>\r\n            </TabbedForm>\r\n        </Edit>\r\n    )\r\n};","import React from 'react';\r\nimport {\r\n    Create,\r\n    Edit,\r\n    TabbedForm,\r\n    FormTab,\r\n    SelectInput,\r\n    SelectArrayInput,\r\n    ReferenceArrayInput,\r\n    TextInput,\r\n    ImageInput,\r\n    FormDataConsumer,\r\n    required\r\n} from 'react-admin';\r\nimport ImageField from '~/components/fields/ImageField';\r\n\r\nconst typeChoices = [\r\n    {\r\n        name: 'Сетка новостей',\r\n        value: 'feed'\r\n    },\r\n    {\r\n        name: 'Баннер',\r\n        value: 'banner'\r\n    }\r\n]\r\n\r\nconst sizeChoices = [\r\n    {\r\n        name: \"Маленький\",\r\n        value: \"small\"\r\n    },\r\n    {\r\n        name: \"Средний\",\r\n        value: \"medium\"\r\n    },\r\n    {\r\n        name: \"Большой\",\r\n        value: \"big\"\r\n    }\r\n]\r\n\r\nconst staticPageChoices = [\r\n    { name: 'Главная', _id: 'main' },\r\n    { name: 'Поиск', _id: 'search' }\r\n]\r\n\r\nconst EditorTitle = ({record}) => <span>Редактировать {record.name}</span>;\r\n\r\nexport const PostEdit = props => (\r\n    <Edit {...props} title={<EditorTitle/>}>\r\n        <TabbedForm>\r\n            <FormTab label=\"Основное\">\r\n                <ImageInput source=\"image\" label=\"Изображение\" labelSingle=\"Выберите одно изображение\">\r\n                    <ImageField/>\r\n                </ImageInput>\r\n\r\n                <TextInput source=\"name\" label=\"Заголовок\" validate={required('Обязательное поле')}/>\r\n\r\n                <SelectInput \r\n                    source=\"type\" \r\n                    choices={typeChoices}\r\n                    optionText=\"name\"\r\n                    optionValue=\"value\"\r\n                    label=\"Тип отображения\"\r\n                    validate={required('Обязательное поле')}\r\n                />\r\n\r\n                <FormDataConsumer>\r\n                    {\r\n                        ({formData, ...rest}) => formData.type === 'feed' ?\r\n                            <SelectInput \r\n                                source=\"size\" \r\n                                choices={sizeChoices}\r\n                                optionText=\"name\"\r\n                                optionValue=\"value\"\r\n                                {...rest}\r\n                                label=\"Размер в сетке\"\r\n                                validate={required('Обязательное поле')}\r\n                            /> :\r\n                            <ReferenceArrayInput source=\"page\" reference=\"cats\" label=\"Страницы\">\r\n                                <ReferenceArraySelect additionalChoices={staticPageChoices} validate={required('Обязательное поле')}/>\r\n                            </ReferenceArrayInput>\r\n                    }\r\n                </FormDataConsumer>\r\n\r\n                <TextInput source=\"link\" label=\"Ссылка на кнопке\"/>\r\n            </FormTab>\r\n\r\n            {/* TODO почему не обновляется текст? */}\r\n            <FormTab label=\"Текст\">\r\n                <TextInput fullWidth={true} source=\"content\" label=\"Содержание\" validate={required('Обязательное поле')}/>\r\n            </FormTab>\r\n        </TabbedForm>\r\n    </Edit>\r\n);\r\n\r\nexport const PostCreate = props => (\r\n    <Create {...props} title=\"Создать пост\">\r\n        <TabbedForm>\r\n            <FormTab label=\"Основное\">\r\n                <ImageInput source=\"image\" label=\"Изображение\" labelSingle=\"Выберите одно изображение\">\r\n                    <ImageField/>\r\n                </ImageInput>\r\n\r\n                <TextInput source=\"name\" label=\"Заголовок\" validate={required('Обязательное поле')}/>\r\n\r\n                <SelectInput \r\n                    source=\"type\" \r\n                    choices={typeChoices}\r\n                    optionText=\"name\"\r\n                    optionValue=\"value\"\r\n                    label=\"Тип отображения\"\r\n                    validate={required('Обязательное поле')}\r\n                />\r\n\r\n                <FormDataConsumer>\r\n                    {\r\n                        ({formData, ...rest}) => formData.type === 'feed' ?\r\n                            <SelectInput \r\n                                source=\"size\" \r\n                                choices={sizeChoices}\r\n                                optionText=\"name\"\r\n                                optionValue=\"value\"\r\n                                {...rest}\r\n                                label=\"Размер в сетке\"\r\n                            /> :\r\n                            <ReferenceArrayInput source=\"page\" reference=\"cats\" label=\"Страницы\">\r\n                                <ReferenceArraySelect additionalChoices={staticPageChoices} validate={required('Обязательное поле')}/>\r\n                            </ReferenceArrayInput>\r\n                    }\r\n                </FormDataConsumer>\r\n\r\n                <TextInput source=\"link\" label=\"Ссылка на кнопке\"/>\r\n            </FormTab>\r\n\r\n            {/* TODO почему не обновляется текст? */}\r\n            <FormTab label=\"Текст\">\r\n                <TextInput fullWidth={true} source=\"content\" label=\"Содержание\" validate={required('Обязательное поле')}/>            \r\n            </FormTab>\r\n        </TabbedForm>\r\n    </Create>\r\n);\r\n\r\nconst ReferenceArraySelect = ({additionalChoices = [], choices, ...rest}) => (\r\n    <SelectArrayInput choices={choices.concat(additionalChoices)} optionText=\"name\" optionValue=\"_id\" {...rest}/>\r\n);\r\n","import React from 'react';\r\nimport {\r\n    Create,\r\n    Edit,\r\n    SimpleForm,\r\n    ReferenceInput,\r\n    SelectInput,\r\n    TextInput,\r\n    NumberInput,\r\n    required\r\n} from 'react-admin';\r\n\r\nconst EditorTitle = ({record}) => <span>Редактировать {record.name}</span>;\r\n\r\nexport const NameOnlyEdit = props => (\r\n    <Edit {...props} title={<EditorTitle/>}>\r\n        <SimpleForm>\r\n            <TextInput source=\"name\" validate={required('обязательное поле')}/>\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const NameOnlyCreate = props => (\r\n    <Create {...props} title={props.title}>\r\n        <SimpleForm>\r\n            <TextInput source=\"name\" validate={required('обязательное поле')}/>\r\n        </SimpleForm>\r\n    </Create>\r\n);","import React from 'react';\r\nimport {\r\n    Create,\r\n    Edit,\r\n    SimpleForm,\r\n    TextInput,\r\n    NumberInput,\r\n    required\r\n} from 'react-admin';\r\nimport { ColorInput } from 'react-admin-color-input';\r\n\r\nconst EditTitle = ({record}) => <span>Редактировать {record.name}</span>;\r\n\r\nexport const ColorCreate = (props) => (\r\n    <Create {...props} title=\"Создать цвет\">\r\n        <SimpleForm>\r\n            <TextInput source=\"name\" label=\"Название\" validate={required('обязательное поле')}/>\r\n            <ColorInput source=\"code\" label=\"Цвет\" validate={required('обязательное поле')}/>\r\n        </SimpleForm>\r\n    </Create>\r\n)\r\n\r\nexport const ColorEdit = (props) => (\r\n    <Edit {...props} title={<EditTitle/>}>\r\n        <SimpleForm>\r\n            <TextInput source=\"name\" label=\"Название\" validate={required('обязательное поле')}/>\r\n            <ColorInput source=\"code\" label=\"Цвет\" validate={required('обязательное поле')}/>\r\n        </SimpleForm>\r\n    </Edit>\r\n)","import React from 'react';\r\nimport {\r\n    Create,\r\n    TabbedForm,\r\n    FormTab,\r\n    ReferenceInput,\r\n    SelectInput,\r\n    TextInput,\r\n    NumberInput,\r\n    ArrayInput,\r\n    SimpleFormIterator,\r\n    AutocompleteInput,\r\n    ImageInput,\r\n    ImageField,\r\n    SelectArrayInput,\r\n    BooleanInput,\r\n    required\r\n} from 'react-admin';\r\n\r\nconst forChoices = [\r\n    {\r\n        name: \"Унисекс\",\r\n        value: \"unisex\"\r\n    },\r\n    {\r\n        name: \"Для мужчин\",\r\n        value: \"male\"\r\n    },\r\n    {\r\n        name: \"Для женщин\",\r\n        value: \"female\"\r\n    }\r\n]\r\n\r\nconst defaultValues = {\r\n    variants: [\r\n        {\r\n            images: [],\r\n            color: null,\r\n            brand: null\r\n        }\r\n    ],\r\n    prices: [\r\n        {\r\n            minQty: 1,\r\n            amount: null\r\n        }\r\n    ]\r\n};\r\n\r\nfunction validateProduct ({\r\n    name,\r\n    sku,\r\n    variants,\r\n    prices\r\n}) {\r\n    const errors = {};\r\n\r\n    if ( !name ) errors.name = 'Обязательное поле';\r\n    if ( !sku ) errors.sku = 'Обязательное поле';\r\n    if ( variants?.length < 1 ) errors.variants = 'Укажите минимум одну вариацию товара';\r\n    if ( prices?.length < 1 ) errors.prices = 'Укажите минимум одну оптовую цену';\r\n\r\n    return errors;\r\n}\r\n\r\nfunction validatePriceQty (value, {prices}, input) {\r\n    const priceIndex = input.name.match(/\\d/)[0];\r\n    if ( priceIndex == 0 && value != 1 ) return 'Мин. кол-во заказанного товара для первой цены должно быть 1';\r\n    if ( value < prices[priceIndex - 1]?.minQty ) return 'Мин. кол-во заказанного товара должно быть больше, чем для предыдущей цены';\r\n    else return undefined;\r\n}\r\n\r\nexport default function CreateProduct(props) {\r\n    return (\r\n        <Create {...props} title=\"Создать товар\">\r\n            <TabbedForm validate={validateProduct} initialValues={defaultValues}>\r\n                <FormTab label=\"Основное\">\r\n                    <ImageInput \r\n                        source=\"images\" \r\n                        label=\"Общие изображения товара\" \r\n                        labelMultiple=\"Выберите до 3-х изображений\" \r\n                        multiple\r\n                    >\r\n                        <ImageField source=\"src\" title=\"name\"/>\r\n                    </ImageInput>\r\n\r\n                    <TextInput source=\"name\" label=\"Название\"/>\r\n                    <TextInput source=\"sku\" label=\"Артикул\"/>\r\n\r\n                    <ReferenceInput source=\"cat\" reference=\"cats\" label=\"Категория\">\r\n                        <SelectInput optionText=\"name\" optionValue=\"_id\"/>\r\n                    </ReferenceInput>\r\n\r\n                    <SelectInput \r\n                        source=\"for\" \r\n                        choices={forChoices}\r\n                        optionText=\"name\"\r\n                        optionValue=\"value\"\r\n                        label=\"Для\"\r\n                    />\r\n\r\n                    <ReferenceInput source=\"materials\" reference=\"materials\" label=\"Материалы\">\r\n                        <SelectArrayInput optionText=\"name\" optionValue=\"_id\"/>\r\n                    </ReferenceInput>\r\n\r\n                    <BooleanInput source='isPublished'/>\r\n                </FormTab>\r\n\r\n                <FormTab label=\"Описание\">\r\n                    <TextInput fullWidth={true} source=\"shortDesc\" label=\"Краткое описание\"/>\r\n                    <TextInput fullWidth={true} source=\"desc\" label=\"Описание\"/>\r\n                </FormTab>\r\n\r\n                <FormTab label=\"Вариации/наличие\">\r\n                    <ArrayInput source=\"variants\">\r\n                        <SimpleFormIterator>\r\n                            <ImageInput source=\"images\" label=\"Изображения вариации\" labelMultiple=\"Выберите до 2-х изображений\" multiple>\r\n                                <ImageField source=\"src\" title=\"name\"/>\r\n                            </ImageInput>\r\n\r\n                            <ReferenceInput source=\"attributes.color\" reference=\"colors\" label=\"Цвет\" validate={required('Обязательное поле')}>  \r\n                                <AutocompleteInput optionText=\"name\" optionValue=\"_id\"/>\r\n                            </ReferenceInput>\r\n\r\n                            <ReferenceInput source=\"attributes.brand\" reference=\"brands\" label=\"Бренд\" validate={required('Обязательное поле')}>  \r\n                                <AutocompleteInput optionText=\"name\" optionValue=\"_id\"/>\r\n                            </ReferenceInput>\r\n\r\n                            <NumberInput source=\"stock\" label=\"Наличие\" validate={required('Обязательное поле')}/>\r\n                        </SimpleFormIterator>\r\n                    </ArrayInput>\r\n                </FormTab>\r\n\r\n                {/* TODO добавить возможность добавления товара с одним атрибутом */}\r\n                <FormTab label=\"Спецификации\">\r\n                    <ArrayInput source=\"specs\" label=\"\">\r\n                        <SimpleFormIterator>\r\n                            <TextInput source=\"[0]\" label=\"Название\"/>\r\n                            <TextInput source=\"[1]\" label=\"Значение\"/>\r\n                        </SimpleFormIterator>\r\n                    </ArrayInput>\r\n                </FormTab>\r\n\r\n                {/* TODO проверить валидацию минимального кол-ва */}\r\n                <FormTab label=\"Цены\">\r\n                    <ArrayInput source=\"prices\" label=\"\">\r\n                        <SimpleFormIterator>\r\n                            <NumberInput source=\"minQty\" label=\"Мин. необходимое кол-во\" validate={validatePriceQty}/>\r\n                            <NumberInput source=\"amount\" label=\"Цена за штуку\" validate={required('Обязательное поле')}/>\r\n                        </SimpleFormIterator>\r\n                    </ArrayInput>\r\n                </FormTab>\r\n\r\n                <FormTab label=\"Вес/габариты\">\r\n                    <NumberInput \r\n                        source=\"shippingDetails.dimensions.w\" \r\n                        label=\"Ширина (мм)\"\r\n                    />\r\n                    <NumberInput \r\n                        source=\"shippingDetails.dimensions.l\"\r\n                        label=\"Длина (мм)\"\r\n                    />\r\n                    <NumberInput \r\n                        source=\"shippingDetails.dimensions.h\"\r\n                        label=\"Высота (мм)\"\r\n                    />\r\n                    <NumberInput \r\n                        source=\"shippingDetails.weight\"\r\n                        label=\"Вес (г)\"\r\n                    />\r\n                </FormTab>\r\n            </TabbedForm>\r\n        </Create>\r\n    );\r\n}","import React, { useContext } from 'react';\r\nimport { Admin, Resource } from 'react-admin';\r\nimport dataProvider from '~/providers/extendedProvider';\r\nimport authProvider from '~/providers/authProvider';\r\n\r\nimport CatList from '~/components/lists/CatList.js'\r\nimport ProductList from '~/components/lists/ProductList.js'\r\nimport PostList from '~/components/lists/PostList.js'\r\nimport NameOnlyList from './components/lists/NameOnlyList';\r\nimport ColorList from './components/lists/ColorList';\r\n\r\nimport { CatEdit, CatCreate } from '~/components/editors/CatEditor.js';\r\nimport EditProduct from '~/components/editors/ProductEditor.js';\r\nimport { PostEdit, PostCreate } from '~/components/editors/PostEditor.js';\r\nimport { NameOnlyEdit, NameOnlyCreate } from '~/components/editors/NameOnlyEditor.js';\r\nimport { ColorCreate, ColorEdit } from '~/components/editors/ColorEditor.js';\r\n\r\nimport CreateProduct from '~/components/create/CreateProduct.js';\r\n\r\nimport ProductIcon from '@material-ui/icons/LocalMall';\r\nimport CategoryIcon from '@material-ui/icons/Category';\r\nimport MaterialIcon from '@material-ui/icons/Loyalty';\r\nimport BrandIcon from '@material-ui/icons/Apple';\r\nimport PostIcon from '@material-ui/icons/Book';\r\nimport BrushIcon from '@material-ui/icons/Brush';\r\n\r\nfunction App() {\r\n    return (\r\n        <Admin title=\"Matoon Store\" dataProvider={dataProvider} authProvider={authProvider}>\r\n            <Resource \r\n                name=\"products\" \r\n                list={ProductList} \r\n                edit={EditProduct} \r\n                create={CreateProduct} \r\n                options={{ label: 'Товары' }}\r\n                icon={ProductIcon}\r\n            />\r\n            <Resource \r\n                name=\"cats\" \r\n                list={CatList} \r\n                edit={CatEdit} \r\n                create={CatCreate} \r\n                options={{ label: 'Категории' }} \r\n                icon={CategoryIcon}\r\n            />\r\n            <Resource \r\n                name=\"brands\" \r\n                list={props => <NameOnlyList title=\"Бренды\" {...props}/>} \r\n                edit={NameOnlyEdit} \r\n                create={props => <NameOnlyCreate title=\"Создать бренд\" {...props}/>} \r\n                options={{ label: 'Бренды' }}\r\n                icon={BrandIcon}\r\n            />\r\n            <Resource \r\n                name=\"materials\" \r\n                list={props => <NameOnlyList title=\"Материалы\" {...props}/>} \r\n                edit={NameOnlyEdit} \r\n                create={props => <NameOnlyCreate title=\"Создать материал\" {...props}/>} \r\n                options={{ label: 'Материалы' }}\r\n                icon={MaterialIcon}\r\n            />\r\n            <Resource \r\n                name=\"posts\" \r\n                list={PostList} \r\n                edit={PostEdit} \r\n                create={PostCreate} \r\n                options={{ label: 'Посты' }}\r\n                icon={PostIcon}\r\n            />\r\n            <Resource \r\n                name=\"colors\" \r\n                list={ColorList} \r\n                edit={ColorEdit} \r\n                create={ColorCreate} \r\n                options={{ label: 'Цвета' }}\r\n                icon={BrushIcon}\r\n            />\r\n            <Resource name=\"images\" />\r\n        </Admin>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport App from './app';\r\nimport { render } from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nrender( <BrowserRouter><App/></BrowserRouter>, document.getElementById('app'));\r\n"],"sourceRoot":""}